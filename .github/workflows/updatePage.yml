# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to s3

on:
  # Runs on pushes targeting the default branch
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  terraform:
    name: push web on s3
    runs-on: ubuntu-latest
    steps:
      - name: Get repository name
        run: echo "REPO=$(echo ${{ github.repository }} | cut -d'/' -f 2)" >> $GITHUB_ENV

        
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with: 
          terraform_version: 1.0.0

      - name: Configure AWS credentials
        run: |
          aws --version
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Create DynamoDB table
        run: |
          TABLE_NAME="my-terraform-state-lock-auto-web-${{ env.REPO }}"

          # Check if the table exists
          if ! aws dynamodb describe-table --table-name $TABLE_NAME > /dev/null 2>&1
          then
              # If the table does not exist, create it
              aws dynamodb create-table \
                  --table-name $TABLE_NAME \
                  --attribute-definitions AttributeName=LockID,AttributeType=S \
                  --key-schema AttributeName=LockID,KeyType=HASH \
                  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi

      - name: Terraform init and apply
        run: |
          cd aws-s3
          ls && pwd
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

